// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	client "github.com/0xPolygon/cdk-data-availability/client"
	mock "github.com/stretchr/testify/mock"
)

// ClientFactory is an autogenerated mock type for the Factory type
type ClientFactory struct {
	mock.Mock
}

type ClientFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientFactory) EXPECT() *ClientFactory_Expecter {
	return &ClientFactory_Expecter{mock: &_m.Mock}
}

// New provides a mock function with given fields: url
func (_m *ClientFactory) New(url string) client.Client {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 client.Client
	if rf, ok := ret.Get(0).(func(string) client.Client); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.Client)
		}
	}

	return r0
}

// ClientFactory_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type ClientFactory_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - url string
func (_e *ClientFactory_Expecter) New(url interface{}) *ClientFactory_New_Call {
	return &ClientFactory_New_Call{Call: _e.mock.On("New", url)}
}

func (_c *ClientFactory_New_Call) Run(run func(url string)) *ClientFactory_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientFactory_New_Call) Return(_a0 client.Client) *ClientFactory_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientFactory_New_Call) RunAndReturn(run func(string) client.Client) *ClientFactory_New_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientFactory creates a new instance of ClientFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientFactory {
	mock := &ClientFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
