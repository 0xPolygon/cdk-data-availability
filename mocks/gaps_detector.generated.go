// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GapsDetector is an autogenerated mock type for the GapsDetector type
type GapsDetector struct {
	mock.Mock
}

type GapsDetector_Expecter struct {
	mock *mock.Mock
}

func (_m *GapsDetector) EXPECT() *GapsDetector_Expecter {
	return &GapsDetector_Expecter{mock: &_m.Mock}
}

// Gaps provides a mock function with given fields:
func (_m *GapsDetector) Gaps() map[uint64]uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Gaps")
	}

	var r0 map[uint64]uint64
	if rf, ok := ret.Get(0).(func() map[uint64]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint64]uint64)
		}
	}

	return r0
}

// GapsDetector_Gaps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gaps'
type GapsDetector_Gaps_Call struct {
	*mock.Call
}

// Gaps is a helper method to define mock.On call
func (_e *GapsDetector_Expecter) Gaps() *GapsDetector_Gaps_Call {
	return &GapsDetector_Gaps_Call{Call: _e.mock.On("Gaps")}
}

func (_c *GapsDetector_Gaps_Call) Run(run func()) *GapsDetector_Gaps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GapsDetector_Gaps_Call) Return(_a0 map[uint64]uint64) *GapsDetector_Gaps_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GapsDetector_Gaps_Call) RunAndReturn(run func() map[uint64]uint64) *GapsDetector_Gaps_Call {
	_c.Call.Return(run)
	return _c
}

// NewGapsDetector creates a new instance of GapsDetector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGapsDetector(t interface {
	mock.TestingT
	Cleanup(func())
}) *GapsDetector {
	mock := &GapsDetector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
