// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	sequencer "github.com/0xPolygon/cdk-data-availability/sequencer"
	mock "github.com/stretchr/testify/mock"
)

// SequencerTracker is an autogenerated mock type for the SequencerTracker type
type SequencerTracker struct {
	mock.Mock
}

type SequencerTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *SequencerTracker) EXPECT() *SequencerTracker_Expecter {
	return &SequencerTracker_Expecter{mock: &_m.Mock}
}

// GetSequenceBatch provides a mock function with given fields: batchNum
func (_m *SequencerTracker) GetSequenceBatch(batchNum uint64) (*sequencer.SeqBatch, error) {
	ret := _m.Called(batchNum)

	if len(ret) == 0 {
		panic("no return value specified for GetSequenceBatch")
	}

	var r0 *sequencer.SeqBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*sequencer.SeqBatch, error)); ok {
		return rf(batchNum)
	}
	if rf, ok := ret.Get(0).(func(uint64) *sequencer.SeqBatch); ok {
		r0 = rf(batchNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sequencer.SeqBatch)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(batchNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SequencerTracker_GetSequenceBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequenceBatch'
type SequencerTracker_GetSequenceBatch_Call struct {
	*mock.Call
}

// GetSequenceBatch is a helper method to define mock.On call
//   - batchNum uint64
func (_e *SequencerTracker_Expecter) GetSequenceBatch(batchNum interface{}) *SequencerTracker_GetSequenceBatch_Call {
	return &SequencerTracker_GetSequenceBatch_Call{Call: _e.mock.On("GetSequenceBatch", batchNum)}
}

func (_c *SequencerTracker_GetSequenceBatch_Call) Run(run func(batchNum uint64)) *SequencerTracker_GetSequenceBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *SequencerTracker_GetSequenceBatch_Call) Return(_a0 *sequencer.SeqBatch, _a1 error) *SequencerTracker_GetSequenceBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SequencerTracker_GetSequenceBatch_Call) RunAndReturn(run func(uint64) (*sequencer.SeqBatch, error)) *SequencerTracker_GetSequenceBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewSequencerTracker creates a new instance of SequencerTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSequencerTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *SequencerTracker {
	mock := &SequencerTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
